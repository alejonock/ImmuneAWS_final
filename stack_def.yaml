AWSTemplateFormatVersion: '2010-09-09'
Description: Arquitectura funcional real AWS - Frontend, Backend, DB, ALB, NAT, AutoScaling, S3, Lambda

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.4.0/24

Resources:

# =============================
# SECCION 1: Red (VPC, Subredes, Gateway, Rutas)
# =============================

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC-App
    DeletionPolicy: Delete

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IGW-App
    DeletionPolicy: Delete

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
    DeletionPolicy: Delete

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1
    DeletionPolicy: Delete

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2
    DeletionPolicy: Delete

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet1
    DeletionPolicy: Delete

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet2
    DeletionPolicy: Delete

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRoutes
    DeletionPolicy: Delete

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DeletionPolicy: Delete

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
    DeletionPolicy: Delete

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
    DeletionPolicy: Delete

  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DeletionPolicy: Delete

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NatGW
    DeletionPolicy: Delete

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRoutes
    DeletionPolicy: Delete

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
    DeletionPolicy: Delete

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
    DeletionPolicy: Delete

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
    DeletionPolicy: Delete

# =============================
# SECCION 2: Seguridad (Security Groups)
# =============================

  SGALBFrontend:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for Frontend ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SGALBFrontend
    DeletionPolicy: Delete

  SGALBBackend:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for Backend ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref SGFrontendEC2
      Tags:
        - Key: Name
          Value: SGALBBackend
    DeletionPolicy: Delete

  SGFrontendEC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for Frontend EC2
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SGALBFrontend
      Tags:
        - Key: Name
          Value: SGFrontendEC2
    DeletionPolicy: Delete

  SGBackendEC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for Backend EC2
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref SGALBBackend
      Tags:
        - Key: Name
          Value: SGBackendEC2
    DeletionPolicy: Delete

  SGRDS:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for RDS access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref SGBackendEC2
      Tags:
        - Key: Name
          Value: SGRDS
    DeletionPolicy: Delete

  FrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite acceso al frontend desde el ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: frontend-sg
    DeletionPolicy: Delete

  BackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite trafico interno desde frontend
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref FrontendSecurityGroup
      Tags:
        - Key: Name
          Value: backend-sg
    DeletionPolicy: Delete

  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite acceso al RDS solo desde el backend
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref BackendSecurityGroup
      Tags:
        - Key: Name
          Value: rds-sg
    DeletionPolicy: Delete

# =============================
# SECCION 3: CÃ³mputo (Launch Templates, ASG, ALBs)
# =============================

  LabInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DeletionPolicy: Delete
    Properties:
      Roles:
        - LabRole
    
  FrontendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DeletionPolicy: Delete
    Properties:
      LaunchTemplateName: FrontendTemplate
      LaunchTemplateData:
        InstanceType: t3.micro
        ImageId: ami-08a6efd148b1f7504
        SecurityGroupIds:
          - !Ref SGFrontendEC2
        IamInstanceProfile:
          Name: !Ref LabInstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo "<h1>Frontend</h1>" > /var/www/html/index.html
            yum install -y httpd
            systemctl enable httpd
            systemctl start httpd

  BackendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DeletionPolicy: Delete
    Properties:
      LaunchTemplateName: BackendTemplate
      LaunchTemplateData:
        InstanceType: t3.micro
        ImageId: ami-08a6efd148b1f7504
        SecurityGroupIds:
          - !Ref SGBackendEC2
        IamInstanceProfile:
          Name: !Ref LabInstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo "Backend running" > /var/log/backend.log

  FrontendASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DeletionPolicy: Delete
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref FrontendLaunchTemplate
        Version: !GetAtt FrontendLaunchTemplate.LatestVersionNumber
      MinSize: '2'
      MaxSize: '3'
      DesiredCapacity: '2'
      TargetGroupARNs:
        - !Ref FrontendTargetGroup
      Tags:
        - Key: Name
          Value: FrontendInstance
          PropagateAtLaunch: true  

  BackendASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    DeletionPolicy: Delete
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref BackendLaunchTemplate
        Version: !GetAtt BackendLaunchTemplate.LatestVersionNumber
      MinSize: '2'
      MaxSize: '3'
      DesiredCapacity: '2'
      TargetGroupARNs:
        - !Ref BackendTargetGroup
      Tags:
        - Key: Name
          Value: BackendInstance
          PropagateAtLaunch: true  

  FrontendALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DeletionPolicy: Delete
    Properties:
      Name: FrontendALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SGALBFrontend
      Scheme: internet-facing
      
  BackendALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DeletionPolicy: Delete
    Properties:
      Name: BackendALB
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref SGALBBackend
      Scheme: internal

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DeletionPolicy: Delete
    Properties:
      Name: FrontendTG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DeletionPolicy: Delete
    Properties:
      Name: BackendTG
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance

  FrontendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DeletionPolicy: Delete
    Properties:
      LoadBalancerArn: !Ref FrontendALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup

  BackendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DeletionPolicy: Delete
    Properties:
      LoadBalancerArn: !Ref BackendALB
      Port: 8080
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

# =============================
# SECCION 4: Almacenamiento y Eventos (S3 + Lambda)
# =============================

  AppBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub "app-bucket-${AWS::AccountId}-${AWS::Region}"
  
  S3LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: S3EventHandler
      Handler: index.handler
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/LabRole
      Runtime: nodejs18.x
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Event:', JSON.stringify(event, null, 2));
            return {
              statusCode: 200,
              body: 'S3 Event Processed',
            };
          };
    DeletionPolicy: Delete

  S3LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt S3LambdaFunction.Arn
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt AppBucket.Arn
    DeletionPolicy: Delete

# =============================
# SECCION 5: Base de Datos (RDS sin backups ni cifrado)
# =============================

  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: mysql
      EngineVersion: 8.0.34
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      DBInstanceIdentifier: app-db-instance
      MasterUsername: admin
      MasterUserPassword: MySuperSecret123!
      VPCSecurityGroups:
        - !Ref RdsSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      BackupRetentionPeriod: 0
      MultiAZ: false
    DeletionPolicy: Delete

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets privadas para RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
    DeletionPolicy: Delete

# =============================
# SECCION 6: Salidas (Outputs)
# =============================

Outputs:
  PublicALBDNS:
    Description: DNS del ALB publico para acceder al frontend
    Value: !GetAtt FrontendALB.DNSName
  S3BucketName:
    Description: Nombre del bucket S3 para eventos Lambda
    Value: !Ref AppBucket
  LambdaFunctionName:
    Description: Nombre de la funcion Lambda que procesa eventos S3
    Value: !Ref S3LambdaFunction
  RDSInstanceEndpoint:
    Description: Endpoint de conexion a la base de datos
    Value: !GetAtt MyDBInstance.Endpoint.Address